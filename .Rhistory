pull(date)
}
<<<<<<< HEAD
# Team won for each game.
spread_scores_df <- mutate(spread_scores_df, team_win = NA)
for (i in 1:nrow(spread_scores_df)) {
if (spread_scores_df$home_win[i]) {
spread_scores_df$team_win[i] <- spread_scores_df$team_home[i]
} else {
spread_scores_df$team_win[i] <- spread_scores_df$team_away[i]
=======
wa_worst_date <- worst_date_state("Washington")
View(national)
worst_date_state <- function(state_specific) {
states %>%
mutate(new_deaths = deaths - lag(deaths, n = 1, default = 0))
filter(state == state_specific) %>%
filter(cases == max(deaths)) %>%
pull(date)
>>>>>>> 6af5476a66498e0a415bacd7670ed1767fe6799a
}
wa_worst_date <- worst_date_state("Washington")
worst_date_state <- function(state_specific) {
states %>%
mutate(new_deaths = deaths - lag(deaths, n = 1, default = 0)) %>%
filter(state == state_specific) %>%
filter(cases == max(deaths)) %>%
pull(date)
}
<<<<<<< HEAD
# spread_scores_df <- mutate(spread_scores_df, favorite_win = str_detect(team_win, str_split(team_favorite, " ")[[1]][length(str_split(team_favorite, " ")[[1]])]))
# Whether favorite team won or not.
spread_scores_df <- mutate(spread_scores_df, favorite_win = (team_win == team_favorite))
barplot(spread_scores_df$weather_detail)
spread_scores_df %>% group_by(schedule_week) %>%
ggplot() +
geom_point(mapping = aes(x = schedule_season,y = spread_favorite), color = "#56B4E9", alpha = 0.25) +
facet_wrap(~ schedule_week) +
ggsave("spreadweekyears.png")
setwd("~/Documents/INFO 201/ac-group3-final-project")
=======
wa_worst_date <- worst_date_state("Washington")
worst_date_state <- function(state_specific) {
states %>%
filter(state == state_specific) %>%
mutate(new_deaths = deaths - lag(deaths, n = 1, default = 0)) %>%
filter(new_deaths == max(new_deaths)) %>%
pull(date)
}
wa_worst_date <- worst_date_state("Washington")
states %>% filter(state == "Washington")
states %>%
filter(state == "Washington") %>%
mutate(new_deaths = deaths - lag(deaths, n = 1, default = 0))
states %>%
filter(state == state_specific) %>%
mutate(new_deaths = deaths - lag(deaths, n = 1, default = 0)) %>%
filter(new_deaths == max(new_deaths))
states %>%
filter(state == "Washington") %>%
mutate(new_deaths = deaths - lag(deaths, n = 1, default = 0)) %>%
filter(new_deaths == max(new_deaths))
library(tidyverse)
View(highest_in_each_state)
lowest_in_each_state <- counties %>%
filter(date == date[obs_counties]) %>%
group_by(state) %>%
filter(deaths == min(deaths)) %>%
select(location)
View(lowest_in_each_state)
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
select(location) %>%
summarize(county = county, state = state)
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
summarize(county = county, state = state)
View(highest_in_each_state)
lowest_in_each_state <- counties %>%
filter(date == date[obs_counties]) %>%
group_by(state) %>%
filter(deaths == min(deaths)) %>%
summarize(county = county, state = state)
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
select(location)
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
select(county)
lowest_in_each_state <- counties %>%
filter(date == date[obs_counties]) %>%
group_by(state) %>%
filter(deaths == min(deaths)) %>%
select(county)
state_highest_ratio <- states %>%
filter(date == date[obs_states])
state_highest_ratio <- states %>%
filter(date == date[obs_states]) %>%
mutate(dc_ratio = deaths/cases) %>%
filter(dc_ratio == max(dc_ratio)) %>%
select(state)
View(state_highest_ratio)
states %>%
filter(date == date[obs_states]) %>%
mutate(dc_ratio = deaths/cases) %>%
filter(dc_ratio == max(dc_ratio))
states %>%
filter(date == date[obs_states]) %>%
mutate(dc_ratio = deaths/cases)
state_highest_cases <- states %>%
filter(cases == max(cases)) %>%
pull(state)
num_highest_state <- states %>%
filter(cases == max(cases)) %>%
pull(cases)
state_highest_ratio <-
filter(
filter(
states, date == date[obs_states]),
cases == max(cases)) %>%
pull(state)
state_lowest_cases <-
filter(
filter(
states, date == date[obs_states]),
cases == min(cases)) %>%
pull(state)
county_highest_cases <- counties %>%
filter(cases == max(cases)) %>%
pull(county)
num_highest_cases_count <- counties %>%
filter(cases == max(cases)) %>%
pull(cases)
location_most_deaths <- counties %>%
filter(deaths == max(deaths, na.rm = TRUE)) %>%
pull(location)
date_most_cases <- national %>%
filter(new_cases == max(new_cases)) %>%
pull(date)
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths)) %>%
pull(date)
most_deaths <- national %>%
filter(new_deaths == max(new_deaths)) %>%
pull(new_deaths)
new_cases_plot <- plot(national$new_cases)
new_deaths_plot <- plot(national$new_deaths)
highest_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
select(county)
highest_in_wa <- select(
filter(
filter(counties ,state == "Washington"),
cases == max(cases)),
location)
lowest_in_each_state <- counties %>%
filter(date == date[obs_counties]) %>%
group_by(state) %>%
filter(deaths == min(deaths)) %>%
select(county)
prop_no_deaths <- counties %>%
filter(date == date[obs_counties]) %>%
group_by(state) %>%
filter(deaths == 0, .preserve = TRUE) %>%
summarise(prop = n()) %>%
mutate(prop = prop / sum(prop))
wa_prop_no_deaths <- prop_no_deaths  %>%
filter(state == 'Washington') %>%
pull(prop)
state_by_day <- states %>%
group_by(date) %>%
summarise(state_total = sum(cases))
county_by_day <- counties %>%
group_by(date) %>%
summarise(county_total = sum(cases))
totals_by_day <- left_join(state_by_day,county_by_day, by = "date")
all_totals <- left_join(national, totals_by_day, by = "date")
num_state_diff <- all_totals %>%
filter(cases != state_total) %>%
nrow()
num_county_diff <- all_totals %>%
filter(cases != county_total) %>%
nrow()
sum_county_to_state <- counties %>%
group_by(state,date) %>%
summarise(county_totals = sum(cases), .groups = "drop")
joined_states <- left_join(sum_county_to_state, states, by = c("date", "state"))
has_discrepancy <- joined_states %>%
filter(county_totals != cases)
state_highest_difference <- has_discrepancy %>%
mutate(diff = abs(county_totals - cases)) %>%
filter(diff == max(diff)) %>%
pull(state)
worst_month <- mutate(national, month_year = str_c(months(as.Date.character(date)),
" " , str_sub(date, 1, 4))) %>%
group_by(month_year) %>%
summarize(month_deaths = sum(new_deaths)) %>%
filter(month_deaths == max(month_deaths)) %>%
pull(month_year)
worst_date_state <- function(state_specific) {
states %>%
filter(state == state_specific) %>%
mutate(new_deaths = deaths - lag(deaths, n = 1, default = 0)) %>%
filter(new_deaths == max(new_deaths)) %>%
pull(date)
}
wa_worst_date <- worst_date_state("Washington")
playactivity <- read.csv("data/Apple Music Play Activity.csv")
setwd("~/desktop/projects/applemusic")
library(packcircles)
library(ggplot2)
library(viridis)
library(ggiraph)
library(tidyverse)
playactivity <- read.csv("data/Apple Music Play Activity.csv")
data <- playactivity %>%
group_by(Artist.Name) %>%
summarise(count = n(), playtime = sum(End.Position.In.Milliseconds), earliest = min(Event.Start.Timestamp))
packing <- circleProgressiveLayout(data$Artist.Name, sizetype='area')
data <- cbind(playactivity, packing)
dat.gg <- circleLayoutVertices(packing, npoints=50)
ggplot() +
# Make the bubbles
geom_polygon(data = dat.gg, aes(x, y, group = Artist.Name, fill=as.factor(id)), colour = "black", alpha = 0.6) +
# Add text in the center of each bubble + control its size
geom_text(data = data, aes(x, y, size = count, label = Artist.Name)) +
scale_size_continuous(range = c(1,4)) +
# General theme:
theme_void() +
theme(legend.position="none") +
coord_equal()
View(dat.gg)
ggplot() +
# Make the bubbles
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
# Add text in the center of each bubble + control its size
geom_text(data = data, aes(x, y, size = count, label = Artist.Name)) +
scale_size_continuous(range = c(1,4)) +
# General theme:
theme_void() +
theme(legend.position="none") +
coord_equal()
playactivity <- read.csv("data/Apple Music Play Activity.csv")
data <- playactivity %>%
group_by(Artist.Name) %>%
summarise(count = n(), playtime = sum(End.Position.In.Milliseconds), earliest = min(Event.Start.Timestamp))
packing <- circleProgressiveLayout(data$Artist.Name, sizetype='area')
data <- cbind(data, packing)
dat.gg <- circleLayoutVertices(packing, npoints=50)
packing <- circleProgressiveLayout(data$count, sizetype='area')
data <- cbind(data, packing)
dat.gg <- circleLayoutVertices(packing, npoints=50)
ggplot() +
# Make the bubbles
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
# Add text in the center of each bubble + control its size
geom_text(data = data, aes(x, y, size = count, label = Artist.Name)) +
scale_size_continuous(range = c(1,4)) +
# General theme:
theme_void() +
theme(legend.position="none") +
coord_equal()
library(packcircles)
library(ggplot2)
library(viridis)
library(ggiraph)
library(tidyverse)
playactivity <- read.csv("data/Apple Music Play Activity.csv")
data <- playactivity %>%
group_by(Artist.Name) %>%
summarise(count = n(), playtime = sum(End.Position.In.Milliseconds), earliest = min(Event.Start.Timestamp))
packing <- circleProgressiveLayout(data$count, sizetype='area')
data <- cbind(data, packing)
dat.gg <- circleLayoutVertices(packing, npoints=50)
ggplot() +
# Make the bubbles
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
# Add text in the center of each bubble + control its size
geom_text(data = data, aes(x, y, size = count, label = Artist.Name)) +
scale_size_continuous(range = c(1,4)) +
# General theme:
theme_void() +
theme(legend.position="none") +
coord_equal()
>>>>>>> 6af5476a66498e0a415bacd7670ed1767fe6799a
library(tidyverse)
# Read in team annotation data.
teams <- read.csv("data:/teamanno.csv")
# Read in data.
scores_df <- read.csv("data:/spreadspoke_scores.csv")
# Reformat date
scores_df$schedule_date <- as.Date(scores_df$schedule_date, format = "%m/%d/%Y")
# Change SuperBowl to Superbowl and WildCard to Wildcard (2017 season)
scores_df[scores_df$schedule_week == "SuperBowl", "schedule_week"] <- "Superbowl"
scores_df[scores_df$schedule_week == "WildCard", "schedule_week"] <- "Wildcard"
<<<<<<< HEAD
# Add a new column to the dataframe where it tells us if the home team won/lost.
scores_df <- scores_df %>% mutate(home_win = (score_home > score_away))
# Proportion of home teams that won in each season.
prop_home_win <- scores_df %>%
group_by(schedule_season) %>%
filter(home_win == TRUE, .preserve = TRUE) %>%
summarise(prop = n()) %>%
mutate(prop_home_wins = prop / sum(prop))
# Create a dataframe with rows containing spread data.
spread_scores_df <- scores_df %>% filter(!is.na(spread_favorite))
# Average spread of each season.
avg_spreads <- spread_scores_df %>%
group_by(schedule_season) %>%
summarize(avg_spread = mean(spread_favorite))
# Average ou of each season.
avg_ous <- spread_scores_df %>%
group_by(schedule_season) %>%
summarise(avg_ou = mean(over_under_line, na.rm = TRUE))
# Join dataframes.
year_score_df <- left_join(prop_home_win, avg_spreads)
# Join dataframes.
year_score_df <- left_join(year_score_df, avg_ous)
# Filter for only superbowl data.
sb_spreads <- spread_scores_df %>%
filter(schedule_week == "Superbowl")
# Plot the average spread of favorite over the seasons.
theme_set(theme_grey())
ggplot(data = sb_spreads) +
geom_line(mapping = aes(x = schedule_season, y = spread_favorite), color = "skyblue4") +
xlab("Season") +
ylab("Avg. Spread") +
theme(text = element_text(size = 10,  family = "mono"))
# Favorite team for each game.
spread_scores_df <- mutate(spread_scores_df, team_favorite = NA)
for (i in 1:nrow(spread_scores_df)) {
if (spread_scores_df$team_favorite_id[i] == "PICK") {
spread_scores_df$team_favorite[i] <- "PICK"
} else {
team <- teams %>%
filter(Abbreviation == spread_scores_df$team_favorite_id[i]) %>%
select(Name)
spread_scores_df$team_favorite[i] <- team
}
}
# Team won for each game.
spread_scores_df <- mutate(spread_scores_df, team_win = NA)
for (i in 1:nrow(spread_scores_df)) {
if (spread_scores_df$home_win[i]) {
spread_scores_df$team_win[i] <- spread_scores_df$team_home[i]
} else {
spread_scores_df$team_win[i] <- spread_scores_df$team_away[i]
}
}
# spread_scores_df <- mutate(spread_scores_df, favorite_win = str_detect(team_win, str_split(team_favorite, " ")[[1]][length(str_split(team_favorite, " ")[[1]])]))
# Whether favorite team won or not.
spread_scores_df <- mutate(spread_scores_df, favorite_win = (team_win == team_favorite))
barplot(spread_scores_df$weather_detail)
spread_scores_df %>% group_by(schedule_week) %>%
ggplot() +
geom_point(mapping = aes(x = schedule_season,y = spread_favorite), color = "#56B4E9", alpha = 0.25) +
facet_wrap(~ schedule_week) +
ggsave("spreadweekyears.png")
# Plot proportion home wins over the years.
# ggplot() +
#   geom_line(data = year_score_df, aes(x = schedule_season, y = prop_home_wins), color = "darkcyan") +
#   ggsave("homewins.png")
# Plot avg ou over the years.
# ggplot() +
#   geom_line(data = year_score_df, aes(x = schedule_season, y = avg_ou), color = "darkcyan") +
#   ggsave("ou.png")
# Plot avg line over the years.
# ggplot() +
#   geom_line(data = year_score_df, aes(x = schedule_season, y = avg_spread), color = "darkcyan") +
#   ggsave("avgline.png")
# Plot range of spreads for each week
# spread_scores_df %>%
#   filter(schedule_season == 2020) %>%
#   ggplot(aes(x = spread_favorite, xend = spread_favorite,
#              y = schedule_week, group = schedule_week)) +
#   geom_dumbbell(color="#a3c4dc", size=0.75, point.colour.l="#0e668b")
# Plots the spreads for each week different visual
# g <- spread_scores_df %>%
#   filter(schedule_season == 2020) %>%
#   arrange(schedule_date, decreasing = TRUE) %>%
#   ggplot(aes(schedule_week, spread_favorite))
# g + geom_tufteboxplot() +
#   theme(axis.text.x = element_text(angle=65, vjust=0.6))
View(scores_df)
View(scores_df)
View(scores_df)
View(prop_home_win)
View(spread_scores_df)
View(avg_spreads)
# Plot the average spread of favorite over the seasons.
theme_set(theme_grey())
ggplot(data = sb_spreads) +
geom_line(mapping = aes(x = schedule_season, y = spread_favorite), color = "skyblue4") +
xlab("Season") +
ylab("Avg. Spread") +
theme(text = element_text(size = 10,  family = "mono"))
```{r setup, include = FALSE}
library("knitr")
library("ggplot2")
source("analysis.R")
```
```{r setup, include = FALSE}
source("light_analysis.R")
View(spread_scores_df)
View(spread_scores_df)
View(year_score_df)
View(year_score_df)
spread_scores_df <- mutate(spread_scores_df, favorite_win = (team_win == team_favorite))
setwd("~/Documents/INFO 201/ac-group3-final-project")
=======
# Make new column for home win.
scores_df <- scores_df %>% mutate(home_win = (score_home > score_away))
# Only include data that include spread.
scores_df <- scores_df %>% filter(!is.na(spread_favorite))
scores_df <- mutate(scores_df, team_favorite = NA)
for (i in 1:nrow(scores_df)) {
if (scores_df$team_favorite_id[i] == "PICK") {
scores_df$team_favorite[i] <- "PICK"
} else {
team <- teams %>%
filter(Abbreviation == scores_df$team_favorite_id[i]) %>%
select(Name)
scores_df$team_favorite[i] <- team
}
}
setwd("~/desktop/info201/ac-group3-final-project")
>>>>>>> 6af5476a66498e0a415bacd7670ed1767fe6799a
library(tidyverse)
# Read in team annotation data.
teams <- read.csv("data:/teamanno.csv")
# Read in data.
scores_df <- read.csv("data:/spreadspoke_scores.csv")
# Reformat date
scores_df$schedule_date <- as.Date(scores_df$schedule_date, format = "%m/%d/%Y")
# Change SuperBowl to Superbowl and WildCard to Wildcard (2017 season)
scores_df[scores_df$schedule_week == "SuperBowl", "schedule_week"] <- "Superbowl"
scores_df[scores_df$schedule_week == "WildCard", "schedule_week"] <- "Wildcard"
<<<<<<< HEAD
# Add a new column to the dataframe where it tells us if the home team won/lost.
=======
# Make new column for home win.
>>>>>>> 6af5476a66498e0a415bacd7670ed1767fe6799a
scores_df <- scores_df %>% mutate(home_win = (score_home > score_away))
# Only include data that include spread.
scores_df <- scores_df %>% filter(!is.na(spread_favorite))
scores_df <- mutate(scores_df, team_favorite = NA)
for (i in 1:nrow(scores_df)) {
if (scores_df$team_favorite_id[i] == "PICK") {
scores_df$team_favorite[i] <- "PICK"
} else {
team <- teams %>%
filter(Abbreviation == scores_df$team_favorite_id[i]) %>%
select(Name)
scores_df$team_favorite[i] <- team
}
}
<<<<<<< HEAD
# Team won for each game.
spread_scores_df <- mutate(spread_scores_df, team_win = NA)
for (i in 1:nrow(spread_scores_df)) {
if (spread_scores_df$home_win[i]) {
spread_scores_df$team_win[i] <- spread_scores_df$team_home[i]
} else {
spread_scores_df$team_win[i] <- spread_scores_df$team_away[i]
}
}
# spread_scores_df <- mutate(spread_scores_df, favorite_win = str_detect(team_win, str_split(team_favorite, " ")[[1]][length(str_split(team_favorite, " ")[[1]])]))
# Whether favorite team won or not.
spread_scores_df <- mutate(spread_scores_df, favorite_win = (team_win == team_favorite))
barplot(spread_scores_df$weather_detail)
spread_scores_df %>% group_by(schedule_week) %>%
ggplot() +
geom_point(mapping = aes(x = schedule_season,y = spread_favorite), color = "#56B4E9", alpha = 0.25) +
facet_wrap(~ schedule_week) +
ggsave("spreadweekyears.png")
# Plot proportion home wins over the years.
# ggplot() +
#   geom_line(data = year_score_df, aes(x = schedule_season, y = prop_home_wins), color = "darkcyan") +
#   ggsave("homewins.png")
# Plot avg ou over the years.
# ggplot() +
#   geom_line(data = year_score_df, aes(x = schedule_season, y = avg_ou), color = "darkcyan") +
#   ggsave("ou.png")
# Plot avg line over the years.
# ggplot() +
#   geom_line(data = year_score_df, aes(x = schedule_season, y = avg_spread), color = "darkcyan") +
#   ggsave("avgline.png")
# Plot range of spreads for each week
# spread_scores_df %>%
#   filter(schedule_season == 2020) %>%
#   ggplot(aes(x = spread_favorite, xend = spread_favorite,
#              y = schedule_week, group = schedule_week)) +
#   geom_dumbbell(color="#a3c4dc", size=0.75, point.colour.l="#0e668b")
# Plots the spreads for each week different visual
# g <- spread_scores_df %>%
#   filter(schedule_season == 2020) %>%
#   arrange(schedule_date, decreasing = TRUE) %>%
#   ggplot(aes(schedule_week, spread_favorite))
# g + geom_tufteboxplot() +
#   theme(axis.text.x = element_text(angle=65, vjust=0.6))
View(spread_scores_df)
View(spread_scores_df)
=======
>>>>>>> 6af5476a66498e0a415bacd7670ed1767fe6799a
View(teams)
View(team)
View(scores_df)
